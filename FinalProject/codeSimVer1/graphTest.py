from pyecharts import options as opts
from pyecharts.charts import Pie
from pyecharts.faker import Faker

from pyecharts import options as opts
from pyecharts.charts import Bar

c = (
    Bar()
    .add_xaxis(
        ['Xor运算', '一个简单的分数', '三元组计数', '不占用额外空间的合并', '中缀转后缀', '乘积相同', '事情的相似度', '二叉树', '交换字符串中的元素', '倒置个数', '剩下的树', '包含K个的子字符串的计数', '卡旋转', '四元素', '困雨水', '好坏字符串', '字串覆盖', '字符串', '左侧较小而右侧较大的元素', '序列元素', '成对元素', '打印括号编号', '找相同字符', '斯蒂克勒小偷', '最小树形图', '最小生成树', '最长K个唯一字符子字符串', '最长上升子序列', '查找最近的号码', '查找给定总和的所有对', '皇室夫人的名字', '直方图中的最大矩形面积', '等于0或1或2', '简化阵列', '给定总和的子数组', '艾莉亚与大战', '计数字词的出现次数', '计算可能的三角形', '计算差异为k的不重复对', '计算矩阵对的总和', '长度总和', '魔方俱乐部']
    )
    .add_yaxis("ArrayPoisonous", [0.30255996196805107, 0.24097698393659325, 0.24980617376853573, 0.27666487858558236, 0.237241914020524, 0.2323825263107421, 0.2521480902025931, 0.25202822789787716, 0.198187602366884, 0.2611150000476925, 0.21560955308262622, 0.2538191816569871, 0.3858890683786601, 0.22945922521310852, 0.23907915156924173, 0.27766735544198473, 0.21449153322104303, 0.22657701981711745, 0.23211493526816993, 0.2587150744555017, 0.2338569374437896, 0.2787515344040687, 0.33353228784180144, 0.309581889915894, 0.22464849753750532, 0.27706490506885123, 0.2721664478283233, 0.2387012263975337, 0.23150026691010245, 0.22554230596591104, 0.25274367628188704, 0.23351999148113192, 0.27037547144058466, 0.25998982610416493, 0.2608332503086684, 0.268747107265945, 0.2386914611221959, 0.239812873383994, 0.2400824592302608, 0.21653685709586318, 0.2500649989917148, 0.24081170250745573])
    .add_yaxis("ASCII码的降序排列",[0.30556650194911394, 0.3365051422425914, 0.32884550472374435, 0.30313146574701155, 0.33957684394262183, 0.32878488272689654, 0.3491975390573601, 0.30026838255091565, 0.3019948690441658, 0.34676767589792995, 0.30636729075068353, 0.332299829493344, 0.36916609611963047, 0.31215026525477635, 0.3434196278554441, 0.35500583466472124, 0.30407122587523194, 0.3161207488108584, 0.3096855555391764, 0.33259081662331985, 0.3169451971633586, 0.3559057902548908, 0.3170720937070586, 0.3980814458449981, 0.3302133095930312, 0.3460792562209519, 0.37150766629315335, 0.30287391207534414, 0.3232189349496351, 0.31009700079882263, 0.3706985839194461, 0.30069369312498917, 0.335606910651677, 0.33575729467547927, 0.31792013606202746, 0.3011461077648409, 0.326019197430388, 0.326774773650385, 0.3444681990726432, 0.3267480859120078, 0.36663446270893457, 0.3512014727170449])
    .set_global_opts(
        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-15)),
        title_opts=opts.TitleOpts(title="ASCII码的降序排列", subtitle="与第二题相似度超过0.3的题目"),
    )
    .render("over30Sec.html")
)

d = (
    Bar()
    .add_xaxis(
        ['LJJ的字符串', 'Samjia和矩阵', 'Xor运算', '卡旋转', '找相同字符', '斯蒂克勒小偷']
    )
    .add_yaxis("ArrayPoisonous", [0.30116578028539703, 0.3035369250532562, 0.30255996196805107, 0.3858890683786601, 0.33353228784180144, 0.309581889915894])
    .add_yaxis("ASCII码的降序排列",[0.2538794100187357, 0.23642678684573842, 0.3365051422425914, 0.269452218220081, 0.2430525248809652, 0.23955026712960864])
    .set_global_opts(
        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-15)),
        title_opts=opts.TitleOpts(title="ArrayPoisonous", subtitle="与第一题相似度超过0.3的题目"),
    )
    .render("over30Fir.html")
)

# list1=['0.3以上','0.25~0.3','0.2~0.25','0.15~0.2','0.15以下']
# list2=[42,58,53,32,13]
#
# c = (
#     Pie()
#     .add("", [list(z) for z in zip(list1, list2)])
#     .set_colors(["blue", "green", "orange", "red", "purple"])
#     .set_global_opts(title_opts=opts.TitleOpts(title="第二题各段占比"))
#     .set_series_opts(label_opts=opts.LabelOpts(formatter="{b}: {c}"))
#     .render("sumOfParts2.html")
# )